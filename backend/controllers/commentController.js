import Comment from "../models/commentModel.js";
import mongoose from "mongoose";

// Th√™m b√¨nh lu·∫≠n m·ªõi
const addComment = async (req, res) => {
  try {
    const { productId } = req.params;
    let { userId, user, text, rating } = req.body;

    if (!mongoose.Types.ObjectId.isValid(productId)) {
      return res.status(400).json({ message: "‚ùå productId kh√¥ng h·ª£p l·ªá!" });
    }
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ message: "‚ùå userId kh√¥ng h·ª£p l·ªá!" });
    }

    userId = new mongoose.Types.ObjectId(userId); // Chuy·ªÉn th√†nh ObjectId

    const newComment = new Comment({ productId, userId, user, text, rating });
    await newComment.save();

    res.status(201).json(newComment);
  } catch (error) {
    console.error("üö® L·ªói khi th√™m b√¨nh lu·∫≠n:", error);
    res.status(500).json({ message: "‚ùå L·ªói server", error: error.message });
  }
};

  
// L·∫•y danh s√°ch b√¨nh lu·∫≠n c·ªßa m·ªôt s·∫£n ph·∫©m
const getComments = async (req, res) => {
  try {
    const { productId } = req.params;  // L·∫•y productId t·ª´ URL
    if (!productId) {
      return res.status(400).json({ message: "Thi·∫øu productId!" });
    }
    const comments = await Comment.find({ productId }).sort({ createdAt: -1 });
    res.status(200).json(comments);
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch b√¨nh lu·∫≠n:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
};

  

// Like m·ªôt b√¨nh lu·∫≠n
const likeComment = async (req, res) => {
  try {
      const { commentId } = req.params;
      const comment = await Comment.findById(commentId);
      if (!comment) {
          return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n" });
      }

      comment.likes += 1; // Ch·ªâ tƒÉng s·ªë l∆∞·ª£t like
      await comment.save();

      res.json({ success: true, likes: comment.likes });
  } catch (error) {
      res.status(500).json({ message: "L·ªói server" });
  }
}

// Ch·ªânh s·ª≠a b√¨nh lu·∫≠n
const updateComment = async (req, res) => {
  try {
    const { commentId } = req.params;
    const { text } = req.body;

    const updatedComment = await Comment.findByIdAndUpdate(
      commentId,
      { text },
      { new: true }
    );

    if (!updatedComment) {
      return res.status(404).json({ message: "B√¨nh lu·∫≠n kh√¥ng t·ªìn t·∫°i" });
    }
    res.status(200).json(updatedComment);
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// X√≥a b√¨nh lu·∫≠n
const deleteComment = async (req, res) => {
  try {
    const { commentId } = req.params;
    const deletedComment = await Comment.findByIdAndDelete(commentId);
    if (!deletedComment) {
      return res.status(404).json({ message: "B√¨nh lu·∫≠n kh√¥ng t·ªìn t·∫°i" });
    }
    res.status(200).json({ message: "X√≥a b√¨nh lu·∫≠n th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// Admin l·∫•y to√†n b·ªô d·ªØ li·ªáu
const getAllComments = async (req, res) => {
  try {
    const comments = await Comment.find(); // L·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n
    res.status(200).json(comments);
  } catch (error) {
    res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch b√¨nh lu·∫≠n" });
  }
};


export {  likeComment, getComments, addComment, deleteComment, updateComment, getAllComments };
