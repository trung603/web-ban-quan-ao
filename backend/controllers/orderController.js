import orderModel from "../models/orderModel.js";
import userModel from "../models/userModel.js";
import cartModel from "../models/cartModel.js";
import  productModel from '../models/productModel.js'
import Stripe from "stripe";
import mongoose from "mongoose";

// Bi·∫øn to√†n c·ª•c
const currency = "USD"; // ƒê∆°n v·ªã ti·ªÅn t·ªá
const deliveryCharge = 10; 

// Kh·ªüi t·∫°o c·ªïng thanh to√°n Stripe
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

// ƒê·∫∑t h√†ng b·∫±ng ph∆∞∆°ng th·ª©c Thanh to√°n khi nh·∫≠n h√†ng (COD)
const placeOrder = async (req, res) => {
    try {
        debugger
        const { userId, items, amount, address } = req.body;

        // Ki·ªÉm tra userId h·ª£p l·ªá
        if (!mongoose.Types.ObjectId.isValid(userId)) {
            return res.status(400).json({ success: false, message: "ID kh√¥ng h·ª£p l·ªá!" });
        }

        // üìå T·∫°o ƒë∆°n h√†ng m·ªõi
        const orderData = {
            userId,
            items,
            address,
            amount,
            paymentMethod: "COD",
            payment: false,
            status: "Order Placed",
            date: Date.now(),
        };

        const newOrder = new orderModel(orderData);
        await newOrder.save();

        // ‚úÖ X√≥a gi·ªè h√†ng c·ªßa user sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
        await cartModel.findOneAndDelete({ userId });

        res.json({ success: true, message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng!" });
    } catch (error) {
        console.error("üî• L·ªói khi ƒë·∫∑t h√†ng COD:", error);
        res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng!" });
    }
};

// ƒê·∫∑t h√†ng b·∫±ng ph∆∞∆°ng th·ª©c thanh to√°n Stripe
const placeOrderStripe = async (req, res) => {
    try {
        const { userId, items, amount, address } = req.body;
        const { origin } = req.headers; // L·∫•y URL ngu·ªìn t·ª´ request header

        if (!userId || !items || items.length === 0 || !amount || !address) {
            return res.status(400).json({ success: false, message: "Thi·∫øu d·ªØ li·ªáu ƒë·∫∑t h√†ng!" });
        }

        // T·∫°o d·ªØ li·ªáu ƒë∆°n h√†ng
        const orderData = {
            userId,
            items,
            address,
            amount,
            paymentMethod: "Stripe",
            payment: false,
            date: Date.now()
        };

        // L∆∞u ƒë∆°n h√†ng v√†o database
        const newOrder = new orderModel(orderData);
        await newOrder.save();

        
        // T·∫°o danh s√°ch s·∫£n ph·∫©m ƒë·ªÉ thanh to√°n
        const line_items = []
        
        items.forEach((item) => {
            line_items.push({
                price_data: {
                    currency: currency,
                    product_data: {
                        name: item.name,
                    },
                    unit_amount: (item.price) * 100, // ƒê·ªïi sang cent
                },
                quantity: (item.quantity),
            })
        });

        // Th√™m ph√≠ v·∫≠n chuy·ªÉn v√†o danh s√°ch thanh to√°n
        line_items.push({
            price_data: {
                currency: currency,
                product_data: { name: "Ph√≠ v·∫≠n chuy·ªÉn" },
                unit_amount: Number(deliveryCharge * 100),
            },
            quantity: 1,
        });

        // T·∫°o phi√™n thanh to√°n v·ªõi Stripe
        const session = await stripe.checkout.sessions.create({
            success_url: `${origin}/verify?success=true&orderId=${newOrder._id}`,
            cancel_url: `${origin}/verify?success=false&orderId=${newOrder._id}`,
            line_items,
            mode: "payment",
        });

        res.json({ success: true, session_url: session.url });
    } catch (error) {
        console.error("L·ªói khi t·∫°o phi√™n Stripe:", error);
        res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng" });
    }
};

// X√°c minh thanh to√°n Stripe
const verifyStripe = async (req, res) => {
    try {
        const { orderId, success, userId } = req.body;

        if (success === "true") {
            await orderModel.findByIdAndUpdate(orderId, { payment: true });
            await userModel.findByIdAndUpdate(userId, { cartData: {} });

            res.json({ success: true, message: "Thanh to√°n th√†nh c√¥ng!" });
        } else {
            await orderModel.findByIdAndDelete(orderId);
            res.json({ success: false, message: "Thanh to√°n th·∫•t b·∫°i, ƒë∆°n h√†ng ƒë√£ b·ªã x√≥a!" });
        }
    } catch (error) {
        console.error("L·ªói khi x√°c minh thanh to√°n:", error);
        res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng" });
    }
}; 

// L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng cho b·∫£ng qu·∫£n tr·ªã
const allOrders = async (req, res) => {
    try {
        
        const orders = await orderModel.find({});
        res.json({ success: true, orders });
    } catch (error) {
        console.error("L·ªói khi l·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng:", error);
        res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng" });
    }
};

// L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ
const userOrders = async (req, res) => {
    try {
        const { userId } = req.params;

        const orders = await orderModel.find({ userId });
        
        res.json({ success: true, orders });
    } catch (error) {
        console.error("L·ªói khi l·∫•y ƒë∆°n h√†ng ng∆∞·ªùi d√πng:", error);
        res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng" });
    }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng t·ª´ b·∫£ng qu·∫£n tr·ªã
const updateStatus = async (req, res) => {
    try {
        const { orderId, status } = req.body;

        if (!mongoose.Types.ObjectId.isValid(orderId)) {
            return res.status(400).json({ success: false, message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" });
        }

        await orderModel.findByIdAndUpdate(orderId, { status });

        res.json({ success: true, message: "Tr·∫°ng th√°i ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t" });
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
        res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng" });
    }
};

// T√≠nh t·ªïng s·ªë ƒë∆°n h√†ng
const countOrders = async (req, res) => {
    try {
        const totalOrders = await orderModel.countDocuments();
        res.json({ success: true, totalOrders });
    } catch (error) {
        console.error("L·ªói khi ƒë·∫øm ƒë∆°n h√†ng:", error);
        res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng" });
    }
};

// T√≠nh t·ªïng doanh thu
const getTotalRevenue = async (req, res) => {
    try {
        const totalRevenue = await orderModel.aggregate([
            { $group: { _id: null, total: { $sum: "$amount" } } }
        ]);

        res.json({ success: true, totalRevenue: totalRevenue[0]?.total || 0 });
    } catch (error) {
        console.error("L·ªói khi t√≠nh doanh thu:", error);
        res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng" });
    }
};

// T·ªïng gi√° nh·∫≠p h√†ng
const getTotalImportCost = async (req, res) => {
    try {
        const totalImportCost = await productModel.aggregate([
            {
                $group: {
                    _id: null,
                    totalImportCost: {
                        $sum: { $multiply: ["$importPrice", "$stock"] } 
                    }
                }
            }
        ]);

        const total = totalImportCost.length > 0 ? totalImportCost[0].totalImportCost : 0;

        res.json({ success: true, totalImportCost: total });
    } catch (error) {
        console.error("L·ªói khi t√≠nh t·ªïng gi√° nh·∫≠p h√†ng:", error);
        res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng" });
    }
};

// h√†m t√≠nh t·ªïng gi√° nh·∫≠p c·ªßa m·ªôt ƒë∆°n h√†ng
const getImportCostByOrder = async (req, res) => {
    try {
        const { orderId } = req.params;

        if (!mongoose.Types.ObjectId.isValid(orderId)) {
            return res.status(400).json({ success: false, message: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" });
        }

        const orderImportCost = await orderModel.aggregate([
            { $match: { _id: new mongoose.Types.ObjectId(orderId) } }, 
            { $unwind: "$items" },
            {
                $addFields: {
                    "items.productId": { $toObjectId: "$items.productId" } // √âp ki·ªÉu String -> ObjectId
                }
            },
            {
                $lookup: {
                    from: "products",
                    localField: "items.productId",
                    foreignField: "_id",
                    as: "productInfo"
                }
            },
            { $unwind: { path: "$productInfo", preserveNullAndEmptyArrays: true } },
            {
                $group: {
                    _id: "$_id",
                    totalImportCost: { 
                        $sum: { 
                            $multiply: [
                                { $ifNull: ["$productInfo.importPrice", 0] }, 
                                { $ifNull: ["$items.quantity", 0] }
                            ]
                        }
                    }
                }
            }
        ]);

        const totalImportCost = orderImportCost.length > 0 ? orderImportCost[0].totalImportCost : 0;

        res.json({ success: true, totalImportCost });
    } catch (error) {
        console.error("L·ªói khi t√≠nh t·ªïng gi√° nh·∫≠p ƒë∆°n h√†ng:", error);
        res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng!" });
    }
};

// l·ª£i nhu·∫≠n d√≤ng
const getProfit = async (req, res) => {
    try {
        // L·∫•y t·ªïng doanh thu
        const revenueResult = await orderModel.aggregate([
            { $group: { _id: null, total: { $sum: "$amount" } } }
        ]);
        const totalRevenue = revenueResult[0]?.total || 0;

        // L·∫•y t·ªïng gi√° nh·∫≠p h√†ng
        const importCostResult = await productModel.aggregate([
            { $group: { _id: null, total: { $sum: { $multiply: ["$importPrice", "$quantity"] } } } }
        ]);
        const totalImportCost = importCostResult[0]?.total || 0;

        // T√≠nh l·ª£i nhu·∫≠n
        const profit = totalRevenue - totalImportCost;

        res.json({ success: true, profit });
    } catch (error) {
        console.error("L·ªói khi t√≠nh l·ª£i nhu·∫≠n:", error);
        res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng!" });
    }
};

// üõí Thanh to√°n v√† c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
const checkout = async (req, res) => {
    try {
        const { userId } = req.body;

        if (!mongoose.Types.ObjectId.isValid(userId)) {
            return res.status(400).json({ success: false, message: "ID kh√¥ng h·ª£p l·ªá!" });
        }

        const cart = await cartModel.findOne({ userId }).populate("items.itemId");

        if (!cart || cart.items.length === 0) {
            return res.status(400).json({ success: false, message: "Gi·ªè h√†ng tr·ªëng!" });
        }

        // Ki·ªÉm tra t·ªìn kho
        for (let item of cart.items) {
            let product = await productModel.findById(item.itemId);
            if (!product || product.stock < item.quantity) {
                return res.status(400).json({ 
                    success: false, 
                    message: `S·∫£n ph·∫©m ${product?.name || "kh√¥ng x√°c ƒë·ªãnh"} kh√¥ng ƒë·ªß h√†ng!` 
                });
            }
        }

        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho
        for (let item of cart.items) {
            debugger
            await productModel.findByIdAndUpdate(item.itemId, {
                $inc: { stock: -item.quantity }
            });
        }

        // L·∫•y danh s√°ch s·∫£n ph·∫©m m·ªõi sau khi c·∫≠p nh·∫≠t
        const updatedProducts = await productModel.find();

        // X√≥a gi·ªè h√†ng sau khi thanh to√°n
        await cart.findOneAndDelete({ userId });

        res.json({ 
            success: true, 
            message: "Thanh to√°n th√†nh c√¥ng!", 
            products: updatedProducts  // Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m m·ªõi
        });

    } catch (error) {
        console.error("üî• L·ªói khi thanh to√°n:", error);
        res.status(500).json({ success: false, message: "L·ªói khi thanh to√°n!", error });
    }
};

// H√†m t√≠nh t·ªïng gi√° nh·∫≠p c·ªßa s·∫£n ph·∫©m
const getRevenueByDay = async (req, res) => {
    try {
        const revenueData = await orderModel.aggregate([
            {
                $match: { amount: { $gt: 0 }, createdAt: { $exists: true } } // Ki·ªÉm tra amount v√† createdAt
            },
            {
                $group: {
                    _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
                    totalRevenue: { $sum: "$amount" }
                }
            },
            { $sort: { _id: 1 } }
        ]);

        res.json({ success: true, revenueData });
    } catch (error) {
        console.error("üî• L·ªói khi l·∫•y doanh thu theo ng√†y:", error);
        res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng!" });
    }
};

export { getProfit, verifyStripe, placeOrder, placeOrderStripe, allOrders, userOrders, updateStatus, countOrders, getTotalRevenue, checkout, getRevenueByDay, getTotalImportCost,getImportCostByOrder };