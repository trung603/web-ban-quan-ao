import { createContext, useEffect, useState } from "react";
import { toast } from "react-toastify";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import axiosClient from '../apis/axiosClient'

export const ShopContext = createContext(); // T·∫°o context Shopcontext

const ShopContextProvider = (props) => {
  const currency = "$";
  const delivery_fee = 10;
  const backendUrl = import.meta.env.VITE_BACKEND_URL;
  const [search, setSearch] = useState("");
  const [showSearch, setShowSearch] = useState(false);

  // L·∫•y gi·ªè h√†ng t·ª´ localStorage khi kh·ªüi ƒë·ªông n·∫øu kh√¥ng c√≥ DL th√¨ r·ªóng
  const [cartItems, setCartItems] = useState(() => {
    const savedCart = localStorage.getItem("cartItems");
    return savedCart ? JSON.parse(savedCart) : {};
  });

  const [products, setProducts] = useState([]);
  const [token, setToken] = useState(localStorage.getItem("token") || "");
  const navigate = useNavigate();

  // L·∫•y d·ªØ li·ªáu gi·ªè h√†ng t·ª´ backend
const getProductInCart = async()=> {
  if(!token) return 
  const userId = localStorage.getItem("userId");

  if (!userId) {
    console.warn("Kh√¥ng t√¨m th·∫•y userId trong localStorage");
    return;
  }

  await axiosClient.get(`/api/cart/${userId}`)
  .then((res)=> {
    setCartItems(res.data.cartData || []);
    localStorage.setItem("cartItems", JSON.stringify(res.data.cartData || []));
  })
  .catch((error)=> {
    console.error('Get Cart data error >>>>', error?.message);
    setCartItems([]);
  })
}
  
  // üõçÔ∏è Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
  const addToCart = async (itemId, size, stock) => {
    if (stock === 0) {
      toast.error("S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng v√† kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng!");
      return;
    }
  
    if (!size) {
      toast.warn("Vui l√≤ng ch·ªçn k√≠ch th∆∞·ªõc tr∆∞·ªõc khi th√™m v√†o gi·ªè h√†ng!");
      return;
    }
  
    setCartItems((prev) => {
      let newCart = { ...prev };
      if (!newCart[itemId]) newCart[itemId] = {};
      newCart[itemId][size] = {
        quantity: (newCart[itemId][size]?.quantity || 0) + 1,
      };
      localStorage.setItem("cartItems", JSON.stringify(newCart));
      return newCart;
    });
  
    if (token) {
      try {
        const userId = localStorage.getItem("userId");
        if (!userId) {
          toast.error("L·ªói: Kh√¥ng t√¨m th·∫•y userId!");
          return;
        }
  
        const cartItem = { userId, itemId, size, quantity: 1 };
        const response = await axios.post(`${backendUrl}/api/cart/add`, cartItem, {
          headers: { Authorization: `Bearer ${token}` },
        });
  
        if (response.data.success) {
          toast.success("Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!");
        } else {
          toast.error("L·ªói khi th√™m v√†o gi·ªè h√†ng!");
        }
      } catch (error) {
        toast.error("L·ªói khi th√™m v√†o gi·ªè h√†ng!");
      }
    }
  };
  
  
  // üìå C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
  const updateQuantity = async (itemId, size, quantity) => {
    if (quantity < 0) {
      toast.error("S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!");
      return;
    }

    if (token) {
      try {
        const userId = localStorage.getItem("userId");
        if (!userId) {
          toast.error("L·ªói: Kh√¥ng t√¨m th·∫•y userId!");
          return;
        }

        const cartItem = { userId, itemId, size, quantity };
        await axios.post(`${backendUrl}/api/cart/update`, cartItem, {
          headers: { Authorization: `Bearer ${token}` },
        });

        if (quantity === 0) {
          const removeData = cartItems?.filter(ite => ite?._id !== itemId)
          setCartItems([...removeData])
        } else {
          const indexItem = cartItems.findIndex(val => val?._id === itemId)
          cartItems?.splice(indexItem, 1, 
            {
              ...cartItems?.[indexItem],
              size: quantity
            })
          setCartItems(cartItems => [...cartItems])
        }
        localStorage.setItem("cartItems", JSON.stringify(cartItems));

        toast.success("C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng!");
      } catch (error) {
        toast.error("L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng!");
      }
    }
  };

  // üõí T√≠nh t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
  const getCartCount = () => {
    return cartItems?.length || 0
  };
  
  // üí∞ T√≠nh t·ªïng gi√° tr·ªã gi·ªè h√†ng
  const getCartAmount = () => {
    if (!Array.isArray(cartItems)) {
      console.warn("cartItems kh√¥ng ph·∫£i l√† m·ªôt m·∫£ng:", cartItems);
      return 0; // Tr·∫£ v·ªÅ 0 n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
    }
  
    let totalAmount = cartItems.reduce((total, item) => {
      if (item?.price && item?.quantity) {
        return total + item.price * item.quantity;
      } else {
        console.warn("L·ªói d·ªØ li·ªáu s·∫£n ph·∫©m trong gi·ªè h√†ng:", item);
        return total; // B·ªè qua s·∫£n ph·∫©m c√≥ l·ªói
      }
    }, 0);
  
    return totalAmount;
  };
  
  // üì¶ L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ API
  const getProductsData = async () => {
    try {
      const response = await axios.get(`${backendUrl}/api/product/list`);
      if (response.data.success) {
        setProducts(response.data.products);
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      toast.error("L·ªói khi l·∫•y s·∫£n ph·∫©m!");
    }
  };

  // üöÄ Load s·∫£n ph·∫©m khi kh·ªüi ch·∫°y
  useEffect(() => {
    getProductsData();
  }, []);

  // üîÑ L·∫•y l·∫°i gi·ªè h√†ng khi c√≥ token m·ªõi
  useEffect(() => {
    if (token) {
      getProductInCart()
    }
  }, [token]);

  const logout = () => {
    setToken("");
    localStorage.removeItem("token");
    setCartItems({});
    localStorage.removeItem("cartItems");
    toast.success("ƒêƒÉng xu·∫•t th√†nh c√¥ng!");
    navigate("/login");
  };

  const value = {
    products,
    currency,
    delivery_fee,
    search,
    setSearch,
    showSearch,
    setShowSearch,
    cartItems,
    setCartItems,
    addToCart,
    getCartCount,
    updateQuantity,
    getCartAmount,
    navigate,
    backendUrl,
    setToken,
    token,
    logout,
  };

  return <ShopContext.Provider value={value}>{props.children}</ShopContext.Provider>;
};

export default ShopContextProvider;